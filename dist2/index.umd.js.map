{"version":3,"file":"index.umd.js","sources":["../src/utils/typeOf.ts","../src/utils/isEmpty.ts","../src/utils/isCharInRange.ts","../src/constants.ts","../src/utils/isCharJapanese.ts","../src/isJapanese.ts","../node_modules/memoize-one/dist/memoize-one.esm.js","../node_modules/dequal/dist/index.mjs","../src/utils/mergeWithDefaultOptions.ts","../src/utils/kanaMapping.ts","../src/utils/romajiToKanaMap.ts","../src/utils/isCharUpperCase.ts","../src/utils/isCharLongDash.ts","../src/utils/isCharSlashDot.ts","../src/utils/isCharHiragana.ts","../src/utils/hiraganaToKatakana.ts","../src/toKana.ts","../src/utils/dom.ts","../src/utils/logInputEvents.ts","../src/bind.ts","../src/unbind.ts","../src/utils/isCharRomaji.ts","../src/isRomaji.ts","../src/utils/isCharKatakana.ts","../src/utils/isCharKana.ts","../src/isKana.ts","../src/isHiragana.ts","../src/isKatakana.ts","../src/utils/isCharKanji.ts","../src/isKanji.ts","../src/isMixed.ts","../src/utils/katakanaToHiragana.ts","../src/utils/kanaToRomajiMap.ts","../src/toRomaji.ts","../src/utils/isCharEnglishPunctuation.ts","../src/toHiragana.ts","../src/toKatakana.ts","../src/utils/isCharJapanesePunctuation.ts","../src/tokenize.ts","../src/stripOkurigana.ts"],"sourcesContent":["/**\n * Returns detailed type as string (instead of just 'object' for arrays etc)\n * @private\n * @param {any} value js value\n * @returns {String} type of value\n * @example\n * typeOf({}); // 'object'\n * typeOf([]); // 'array'\n * typeOf(function() {}); // 'function'\n * typeOf(/a/); // 'regexp'\n * typeOf(new Date()); // 'date'\n * typeOf(null); // 'null'\n * typeOf(undefined); // 'undefined'\n * typeOf('a'); // 'string'\n * typeOf(1); // 'number'\n * typeOf(true); // 'boolean'\n * typeOf(new Map()); // 'map'\n * typeOf(new Set()); // 'map'\n */\nfunction typeOf(value: unknown): string {\n  if (value === null) {\n    return 'null';\n  }\n  if (value !== Object(value)) {\n    return typeof value;\n  }\n  return {}.toString\n    .call(value)\n    .slice(8, -1)\n    .toLowerCase();\n}\n\nexport default typeOf;\n","import typeOf from './typeOf';\n/**\n * Checks if input string is empty\n * @param  {String} input text input\n * @return {Boolean} true if no input\n */\nfunction isEmpty(input: unknown) {\n  if (typeOf(input) !== 'string') {\n    return true;\n  }\n  return !(input as string).length;\n}\n\nexport default isEmpty;\n","import isEmpty from './isEmpty';\n\n/**\n * Takes a character and a unicode range. Returns true if the char is in the range.\n * @param  {String}  char  unicode character\n * @param  {Number}  start unicode start range\n * @param  {Number}  end   unicode end range\n * @return {Boolean}\n */\nfunction isCharInRange(char = '', start, end) {\n  if (isEmpty(char)) return false;\n  const code = char.charCodeAt(0);\n  return start <= code && code <= end;\n}\n\nexport default isCharInRange;\n","export const VERSION = '5.0.2';\n\nexport const TO_KANA_METHODS = {\n  HIRAGANA: 'toHiragana',\n  KATAKANA: 'toKatakana',\n};\n\nexport const ROMANIZATIONS = {\n  HEPBURN: 'hepburn',\n};\n\n/**\n * Default config for WanaKana, user passed options will be merged with these\n * @type {DefaultOptions}\n * @name defaultOptions\n * @property {Boolean} [useObsoleteKana=false] - Set to true to use obsolete characters, such as ゐ and ゑ.\n * @example\n * toHiragana('we', { useObsoleteKana: true })\n * // => 'ゑ'\n * @property {Boolean} [passRomaji=false] - Set to true to pass romaji when using mixed syllabaries with toKatakana() or toHiragana()\n * @example\n * toHiragana('only convert the katakana: ヒラガナ', { passRomaji: true })\n * // => \"only convert the katakana: ひらがな\"\n * @property {Object} [convertLongVowelMark=true] - Set to false to prevent conversions of 'ー' to extended vowels with toHiragana()\n * @example\n * toHiragana('ラーメン', { convertLongVowelMark: false });\n * // => 'らーめん\n * @property {Boolean} [upcaseKatakana=false] - Set to true to convert katakana to uppercase using toRomaji()\n * @example\n * toRomaji('ひらがな カタカナ', { upcaseKatakana: true })\n * // => \"hiragana KATAKANA\"\n * @property {Boolean|String} [IMEMode=false] - Set to true, 'toHiragana', or 'toKatakana' to handle conversion while it is being typed.\n * @property {String} [romanization='hepburn'] - choose toRomaji() romanization map (currently only 'hepburn')\n * @property {Object} [customKanaMapping] - custom map will be merged with default conversion\n * @example\n * toKana('wanakana', { customKanaMapping: { na: 'に', ka: 'Bana' }) };\n * // => 'わにBanaに'\n * @property {Object} [customRomajiMapping] - custom map will be merged with default conversion\n * @example\n * toRomaji('つじぎり', { customRomajiMapping: { じ: 'zi', つ: 'tu', り: 'li' }) };\n * // => 'tuzigili'\n */\nexport const DEFAULT_OPTIONS = {\n  useObsoleteKana: false,\n  passRomaji: false,\n  upcaseKatakana: false,\n  IMEMode: false,\n  convertLongVowelMark: true,\n  romanization: ROMANIZATIONS.HEPBURN,\n};\n\n// CharCode References\n// http://www.rikai.com/library/kanjitables/kanji_codes.unicode.shtml\n// http://unicode-table.com\n\nexport const LATIN_LOWERCASE_START = 0x61;\nexport const LATIN_LOWERCASE_END = 0x7a;\nexport const LATIN_UPPERCASE_START = 0x41;\nexport const LATIN_UPPERCASE_END = 0x5a;\nexport const LOWERCASE_ZENKAKU_START = 0xff41;\nexport const LOWERCASE_ZENKAKU_END = 0xff5a;\nexport const UPPERCASE_ZENKAKU_START = 0xff21;\nexport const UPPERCASE_ZENKAKU_END = 0xff3a;\nexport const HIRAGANA_START = 0x3041;\nexport const HIRAGANA_END = 0x3096;\nexport const KATAKANA_START = 0x30a1;\nexport const KATAKANA_END = 0x30fc;\nexport const KANJI_START = 0x4e00;\nexport const KANJI_END = 0x9faf;\nexport const PROLONGED_SOUND_MARK = 0x30fc;\nexport const KANA_SLASH_DOT = 0x30fb;\n\nconst ZENKAKU_NUMBERS = [0xff10, 0xff19];\nconst ZENKAKU_UPPERCASE = [UPPERCASE_ZENKAKU_START, UPPERCASE_ZENKAKU_END];\nconst ZENKAKU_LOWERCASE = [LOWERCASE_ZENKAKU_START, LOWERCASE_ZENKAKU_END];\nconst ZENKAKU_PUNCTUATION_1 = [0xff01, 0xff0f];\nconst ZENKAKU_PUNCTUATION_2 = [0xff1a, 0xff1f];\nconst ZENKAKU_PUNCTUATION_3 = [0xff3b, 0xff3f];\nconst ZENKAKU_PUNCTUATION_4 = [0xff5b, 0xff60];\nconst ZENKAKU_SYMBOLS_CURRENCY = [0xffe0, 0xffee];\n\nconst HIRAGANA_CHARS = [0x3040, 0x309f];\nconst KATAKANA_CHARS = [0x30a0, 0x30ff];\nconst HANKAKU_KATAKANA = [0xff66, 0xff9f];\nconst KATAKANA_PUNCTUATION = [0x30fb, 0x30fc];\nconst KANA_PUNCTUATION = [0xff61, 0xff65];\nconst CJK_SYMBOLS_PUNCTUATION = [0x3000, 0x303f];\nconst COMMON_CJK = [0x4e00, 0x9fff];\nconst RARE_CJK = [0x3400, 0x4dbf];\n\nexport const KANA_RANGES = [\n  HIRAGANA_CHARS,\n  KATAKANA_CHARS,\n  KANA_PUNCTUATION,\n  HANKAKU_KATAKANA,\n];\n\nexport const JA_PUNCTUATION_RANGES = [\n  CJK_SYMBOLS_PUNCTUATION,\n  KANA_PUNCTUATION,\n  KATAKANA_PUNCTUATION,\n  ZENKAKU_PUNCTUATION_1,\n  ZENKAKU_PUNCTUATION_2,\n  ZENKAKU_PUNCTUATION_3,\n  ZENKAKU_PUNCTUATION_4,\n  ZENKAKU_SYMBOLS_CURRENCY,\n];\n\n// All Japanese unicode start and end ranges\n// Includes kanji, kana, zenkaku latin chars, punctuation, and number ranges.\nexport const JAPANESE_RANGES = [\n  ...KANA_RANGES,\n  ...JA_PUNCTUATION_RANGES,\n  ZENKAKU_UPPERCASE,\n  ZENKAKU_LOWERCASE,\n  ZENKAKU_NUMBERS,\n  COMMON_CJK,\n  RARE_CJK,\n];\n\nconst MODERN_ENGLISH = [0x0000, 0x007f];\nconst HEPBURN_MACRON_RANGES = [\n  [0x0100, 0x0101], // Ā ā\n  [0x0112, 0x0113], // Ē ē\n  [0x012a, 0x012b], // Ī ī\n  [0x014c, 0x014d], // Ō ō\n  [0x016a, 0x016b], // Ū ū\n];\nconst SMART_QUOTE_RANGES = [\n  [0x2018, 0x2019], // ‘ ’\n  [0x201c, 0x201d], // “ ”\n];\n\nexport const ROMAJI_RANGES = [MODERN_ENGLISH, ...HEPBURN_MACRON_RANGES];\n\nexport const EN_PUNCTUATION_RANGES = [\n  [0x20, 0x2f],\n  [0x3a, 0x3f],\n  [0x5b, 0x60],\n  [0x7b, 0x7e],\n  ...SMART_QUOTE_RANGES,\n];\n","import isCharInRange from './isCharInRange';\nimport { JAPANESE_RANGES } from '../constants';\n\n/**\n * Tests a character. Returns true if the character is [Katakana](https://en.wikipedia.org/wiki/Katakana).\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharJapanese(char = '') {\n  return JAPANESE_RANGES.some(([start, end]) => isCharInRange(char, start, end));\n}\n\nexport default isCharJapanese;\n","import typeOf from './utils/typeOf';\nimport isEmpty from './utils/isEmpty';\nimport isCharJapanese from './utils/isCharJapanese';\n\n/**\n * Test if `input` only includes [Kanji](https://en.wikipedia.org/wiki/Kanji), [Kana](https://en.wikipedia.org/wiki/Kana), zenkaku numbers, and JA punctuation/symbols.”\n * @param  {String} [input=''] text\n * @param  {Regexp} [allowed] additional test allowed to pass for each char\n * @return {Boolean} true if passes checks\n * @example\n * isJapanese('泣き虫')\n * // => true\n * isJapanese('あア')\n * // => true\n * isJapanese('２月') // Zenkaku numbers allowed\n * // => true\n * isJapanese('泣き虫。！〜＄') // Zenkaku/JA punctuation\n * // => true\n * isJapanese('泣き虫.!~$') // Latin punctuation fails\n * // => false\n * isJapanese('A泣き虫')\n * // => false\n * isJapanese('≪偽括弧≫', /[≪≫]/);\n * // => true\n */\nfunction isJapanese(input = '', allowed?: RegExp) {\n  const augmented = typeOf(allowed) === 'regexp';\n  return isEmpty(input)\n    ? false\n    : [...input].every((char) => {\n      const isJa = isCharJapanese(char);\n      return !augmented ? isJa : isJa || allowed!.test(char);\n    });\n}\n\nexport default isJapanese;\n","var safeIsNaN = Number.isNaN ||\n    function ponyfill(value) {\n        return typeof value === 'number' && value !== value;\n    };\nfunction isEqual(first, second) {\n    if (first === second) {\n        return true;\n    }\n    if (safeIsNaN(first) && safeIsNaN(second)) {\n        return true;\n    }\n    return false;\n}\nfunction areInputsEqual(newInputs, lastInputs) {\n    if (newInputs.length !== lastInputs.length) {\n        return false;\n    }\n    for (var i = 0; i < newInputs.length; i++) {\n        if (!isEqual(newInputs[i], lastInputs[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction memoizeOne(resultFn, isEqual) {\n    if (isEqual === void 0) { isEqual = areInputsEqual; }\n    var cache = null;\n    function memoized() {\n        var newArgs = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            newArgs[_i] = arguments[_i];\n        }\n        if (cache && cache.lastThis === this && isEqual(newArgs, cache.lastArgs)) {\n            return cache.lastResult;\n        }\n        var lastResult = resultFn.apply(this, newArgs);\n        cache = {\n            lastResult: lastResult,\n            lastArgs: newArgs,\n            lastThis: this,\n        };\n        return lastResult;\n    }\n    memoized.clear = function clear() {\n        cache = null;\n    };\n    return memoized;\n}\n\nexport { memoizeOne as default };\n","var has = Object.prototype.hasOwnProperty;\n\nfunction find(iter, tar, key) {\n\tfor (key of iter.keys()) {\n\t\tif (dequal(key, tar)) return key;\n\t}\n}\n\nexport function dequal(foo, bar) {\n\tvar ctor, len, tmp;\n\tif (foo === bar) return true;\n\n\tif (foo && bar && (ctor=foo.constructor) === bar.constructor) {\n\t\tif (ctor === Date) return foo.getTime() === bar.getTime();\n\t\tif (ctor === RegExp) return foo.toString() === bar.toString();\n\n\t\tif (ctor === Array) {\n\t\t\tif ((len=foo.length) === bar.length) {\n\t\t\t\twhile (len-- && dequal(foo[len], bar[len]));\n\t\t\t}\n\t\t\treturn len === -1;\n\t\t}\n\n\t\tif (ctor === Set) {\n\t\t\tif (foo.size !== bar.size) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tfor (len of foo) {\n\t\t\t\ttmp = len;\n\t\t\t\tif (tmp && typeof tmp === 'object') {\n\t\t\t\t\ttmp = find(bar, tmp);\n\t\t\t\t\tif (!tmp) return false;\n\t\t\t\t}\n\t\t\t\tif (!bar.has(tmp)) return false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tif (ctor === Map) {\n\t\t\tif (foo.size !== bar.size) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tfor (len of foo) {\n\t\t\t\ttmp = len[0];\n\t\t\t\tif (tmp && typeof tmp === 'object') {\n\t\t\t\t\ttmp = find(bar, tmp);\n\t\t\t\t\tif (!tmp) return false;\n\t\t\t\t}\n\t\t\t\tif (!dequal(len[1], bar.get(tmp))) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tif (ctor === ArrayBuffer) {\n\t\t\tfoo = new Uint8Array(foo);\n\t\t\tbar = new Uint8Array(bar);\n\t\t} else if (ctor === DataView) {\n\t\t\tif ((len=foo.byteLength) === bar.byteLength) {\n\t\t\t\twhile (len-- && foo.getInt8(len) === bar.getInt8(len));\n\t\t\t}\n\t\t\treturn len === -1;\n\t\t}\n\n\t\tif (ArrayBuffer.isView(foo)) {\n\t\t\tif ((len=foo.byteLength) === bar.byteLength) {\n\t\t\t\twhile (len-- && foo[len] === bar[len]);\n\t\t\t}\n\t\t\treturn len === -1;\n\t\t}\n\n\t\tif (!ctor || typeof foo === 'object') {\n\t\t\tlen = 0;\n\t\t\tfor (ctor in foo) {\n\t\t\t\tif (has.call(foo, ctor) && ++len && !has.call(bar, ctor)) return false;\n\t\t\t\tif (!(ctor in bar) || !dequal(foo[ctor], bar[ctor])) return false;\n\t\t\t}\n\t\t\treturn Object.keys(bar).length === len;\n\t\t}\n\t}\n\n\treturn foo !== foo && bar !== bar;\n}\n","import { DEFAULT_OPTIONS } from '../constants';\n\nexport interface Options {\n  useObsoleteKana: boolean,\n  passRomaji: boolean,\n  upcaseKatakana: boolean,\n  IMEMode: boolean,\n  convertLongVowelMark: boolean,\n  romanization: string,\n}\n\n/**\n * Easy re-use of merging with default options\n * @param {Object} opts user options\n * @returns user options merged over default options\n */\nconst mergeWithDefaultOptions = (opts: Partial<Options> = {}): Options => Object.assign({}, DEFAULT_OPTIONS, opts);\n\nexport default mergeWithDefaultOptions;\n","import typeOf from './typeOf';\n\nexport function applyMapping(str: string, mapping, convertEnding) {\n  const root = mapping;\n\n  function nextSubtree(tree, nextChar) {\n    const subtree = tree[nextChar];\n    if (subtree === undefined) {\n      return undefined;\n    }\n    // if the next child node does not have a node value, set its node value to the input\n    return Object.assign({ '': tree[''] + nextChar }, tree[nextChar]);\n  }\n\n  function newChunk(remaining: string, currentCursor: number) {\n    // start parsing a new chunk\n    const firstChar = remaining.charAt(0);\n\n    return parse(\n      Object.assign({ '': firstChar }, root[firstChar]),\n      remaining.slice(1),\n      currentCursor,\n      currentCursor + 1\n    );\n  }\n\n  function parse(tree, remaining: string, lastCursor: number, currentCursor: number) {\n    if (!remaining) {\n      if (convertEnding || Object.keys(tree).length === 1) {\n        // nothing more to consume, just commit the last chunk and return it\n        // so as to not have an empty element at the end of the result\n        return tree[''] ? [[lastCursor, currentCursor, tree['']]] : [];\n      }\n      // if we don't want to convert the ending, because there are still possible continuations\n      // return null as the final node value\n      return [[lastCursor, currentCursor, null]];\n    }\n\n    if (Object.keys(tree).length === 1) {\n      return [[lastCursor, currentCursor, tree['']]].concat(\n        newChunk(remaining, currentCursor)\n      );\n    }\n\n    const subtree = nextSubtree(tree, remaining.charAt(0));\n\n    if (subtree === undefined) {\n      return [[lastCursor, currentCursor, tree['']]].concat(\n        newChunk(remaining, currentCursor)\n      );\n    }\n    // continue current branch\n    return parse(subtree, remaining.slice(1), lastCursor, currentCursor + 1);\n  }\n\n  return newChunk(str, 0);\n}\n\n// transform the tree, so that for example hepburnTree['ゔ']['ぁ'][''] === 'va'\n// or kanaTree['k']['y']['a'][''] === 'きゃ'\nexport function transform(tree) {\n  return Object.entries(tree).reduce((map, [char, subtree]) => {\n    const endOfBranch = typeOf(subtree) === 'string';\n    // eslint-disable-next-line no-param-reassign\n    map[char] = endOfBranch ? { '': subtree } : transform(subtree);\n    return map;\n  }, {});\n}\n\nexport function getSubTreeOf(tree, string) {\n  return string.split('').reduce((correctSubTree, char) => {\n    if (correctSubTree[char] === undefined) {\n      // eslint-disable-next-line no-param-reassign\n      correctSubTree[char] = {};\n    }\n    return correctSubTree[char];\n  }, tree);\n}\n\n/**\n * Creates a custom mapping tree, returns a function that accepts a defaultMap which the newly created customMapping will be merged with and returned\n * (customMap) => (defaultMap) => mergedMap\n * @param  {Object} customMap { 'ka' : 'な' }\n * @return {Function} (defaultMap) => defaultMergedWithCustomMap\n * @example\n * const sillyMap = createCustomMapping({ 'ちゃ': 'time', '茎': 'cookie'　});\n * // sillyMap is passed defaultMapping to merge with when called in toRomaji()\n * toRomaji(\"It's 茎 ちゃ よ\", { customRomajiMapping: sillyMap });\n * // => 'It's cookie time yo';\n */\nexport function createCustomMapping(customMap = {}) {\n  const customTree = {};\n\n  if (typeOf(customMap) === 'object') {\n    Object.entries(customMap).forEach(([roma, kana]) => {\n      let subTree = customTree;\n      roma.split('').forEach((char) => {\n        if (subTree[char] === undefined) {\n          subTree[char] = {};\n        }\n        subTree = subTree[char];\n      });\n      subTree[''] = kana;\n    });\n  }\n\n  return function makeMap(map) {\n    const mapCopy = JSON.parse(JSON.stringify(map));\n\n    function transformMap(mapSubtree, customSubtree) {\n      if (mapSubtree === undefined || typeOf(mapSubtree) === 'string') {\n        return customSubtree;\n      }\n      return Object.entries(customSubtree).reduce(\n        (newSubtree, [char, subtree]) => {\n          // eslint-disable-next-line no-param-reassign\n          newSubtree[char] = transformMap(mapSubtree[char], subtree);\n          return newSubtree;\n        },\n        mapSubtree\n      );\n    }\n\n    return transformMap(mapCopy, customTree);\n  };\n}\n\n// allow consumer to pass either function or object as customMapping\nexport function mergeCustomMapping(map, customMapping) {\n  if (!customMapping) {\n    return map;\n  }\n  return typeOf(customMapping) === 'function'\n    ? customMapping(map)\n    : createCustomMapping(customMapping)(map);\n}\n","import { transform, getSubTreeOf, createCustomMapping } from './kanaMapping';\n\n// NOTE: not exactly kunrei shiki, for example ぢゃ -> dya instead of zya, to avoid name clashing\n/* eslint-disable */\n// prettier-ignore\nconst BASIC_KUNREI = {\n  a: 'あ', i: 'い', u: 'う', e: 'え', o: 'お',\n  k: { a: 'か', i: 'き', u: 'く', e: 'け', o: 'こ', },\n  s: { a: 'さ', i: 'し', u: 'す', e: 'せ', o: 'そ', },\n  t: { a: 'た', i: 'ち', u: 'つ', e: 'て', o: 'と', },\n  n: { a: 'な', i: 'に', u: 'ぬ', e: 'ね', o: 'の', },\n  h: { a: 'は', i: 'ひ', u: 'ふ', e: 'へ', o: 'ほ', },\n  m: { a: 'ま', i: 'み', u: 'む', e: 'め', o: 'も', },\n  y: { a: 'や', u: 'ゆ', o: 'よ' },\n  r: { a: 'ら', i: 'り', u: 'る', e: 'れ', o: 'ろ', },\n  w: { a: 'わ', i: 'ゐ', e: 'ゑ', o: 'を', },\n  g: { a: 'が', i: 'ぎ', u: 'ぐ', e: 'げ', o: 'ご', },\n  z: { a: 'ざ', i: 'じ', u: 'ず', e: 'ぜ', o: 'ぞ', },\n  d: { a: 'だ', i: 'ぢ', u: 'づ', e: 'で', o: 'ど', },\n  b: { a: 'ば', i: 'び', u: 'ぶ', e: 'べ', o: 'ぼ', },\n  p: { a: 'ぱ', i: 'ぴ', u: 'ぷ', e: 'ぺ', o: 'ぽ', },\n  v: { a: 'ゔぁ', i: 'ゔぃ', u: 'ゔ', e: 'ゔぇ', o: 'ゔぉ', },\n};\n\nconst SPECIAL_SYMBOLS = {\n  '.': '。',\n  ',': '、',\n  ':': '：',\n  '/': '・',\n  '!': '！',\n  '?': '？',\n  '~': '〜',\n  '-': 'ー',\n  '‘': '「',\n  '’': '」',\n  '“': '『',\n  '”': '』',\n  '[': '［',\n  ']': '］',\n  '(': '（',\n  ')': '）',\n  '{': '｛',\n  '}': '｝',\n};\n\nconst CONSONANTS = {\n  k: 'き',\n  s: 'し',\n  t: 'ち',\n  n: 'に',\n  h: 'ひ',\n  m: 'み',\n  r: 'り',\n  g: 'ぎ',\n  z: 'じ',\n  d: 'ぢ',\n  b: 'び',\n  p: 'ぴ',\n  v: 'ゔ',\n  q: 'く',\n  f: 'ふ',\n};\nconst SMALL_Y = { ya: 'ゃ', yi: 'ぃ', yu: 'ゅ', ye: 'ぇ', yo: 'ょ' };\nconst SMALL_VOWELS = { a: 'ぁ', i: 'ぃ', u: 'ぅ', e: 'ぇ', o: 'ぉ' };\n\n// typing one should be the same as having typed the other instead\nconst ALIASES = {\n  sh: 'sy', // sha -> sya\n  ch: 'ty', // cho -> tyo\n  cy: 'ty', // cyo -> tyo\n  chy: 'ty', // chyu -> tyu\n  shy: 'sy', // shya -> sya\n  j: 'zy', // ja -> zya\n  jy: 'zy', // jye -> zye\n\n  // exceptions to above rules\n  shi: 'si',\n  chi: 'ti',\n  tsu: 'tu',\n  ji: 'zi',\n  fu: 'hu',\n};\n\n// xtu -> っ\nconst SMALL_LETTERS = Object.assign(\n  {\n    tu: 'っ',\n    wa: 'ゎ',\n    ka: 'ヵ',\n    ke: 'ヶ',\n  },\n  SMALL_VOWELS,\n  SMALL_Y\n);\n\n// don't follow any notable patterns\nconst SPECIAL_CASES = {\n  yi: 'い',\n  wu: 'う',\n  ye: 'いぇ',\n  wi: 'うぃ',\n  we: 'うぇ',\n  kwa: 'くぁ',\n  whu: 'う',\n  // because it's not thya for てゃ but tha\n  // and tha is not てぁ, but てゃ\n  tha: 'てゃ',\n  thu: 'てゅ',\n  tho: 'てょ',\n  dha: 'でゃ',\n  dhu: 'でゅ',\n  dho: 'でょ',\n};\n\nconst AIUEO_CONSTRUCTIONS = {\n  wh: 'う',\n  kw: 'く',\n  qw: 'く',\n  q: 'く',\n  gw: 'ぐ',\n  sw: 'す',\n  ts: 'つ',\n  th: 'て',\n  tw: 'と',\n  dh: 'で',\n  dw: 'ど',\n  fw: 'ふ',\n  f: 'ふ',\n};\n\n/* eslint-enable */\nfunction createRomajiToKanaMap() {\n  const kanaTree = transform(BASIC_KUNREI);\n  // pseudo partial application\n  const subtreeOf = (string) => getSubTreeOf(kanaTree, string);\n\n  // add tya, sya, etc.\n  Object.entries(CONSONANTS).forEach(([consonant, yKana]) => {\n    Object.entries(SMALL_Y).forEach(([roma, kana]) => {\n      // for example kyo -> き + ょ\n      subtreeOf(consonant + roma)[''] = yKana + kana;\n    });\n  });\n\n  Object.entries(SPECIAL_SYMBOLS).forEach(([symbol, jsymbol]) => {\n    subtreeOf(symbol)[''] = jsymbol;\n  });\n\n  // things like うぃ, くぃ, etc.\n  Object.entries(AIUEO_CONSTRUCTIONS).forEach(([consonant, aiueoKana]) => {\n    Object.entries(SMALL_VOWELS).forEach(([vowel, kana]) => {\n      const subtree = subtreeOf(consonant + vowel);\n      subtree[''] = aiueoKana + kana;\n    });\n  });\n\n  // different ways to write ん\n  ['n', \"n'\", 'xn'].forEach((nChar) => {\n    subtreeOf(nChar)[''] = 'ん';\n  });\n\n  // c is equivalent to k, but not for chi, cha, etc. that's why we have to make a copy of k\n  kanaTree.c = JSON.parse(JSON.stringify(kanaTree.k));\n\n  Object.entries(ALIASES).forEach(([string, alternative]) => {\n    const allExceptLast = string.slice(0, string.length - 1);\n    const last = string.charAt(string.length - 1);\n    const parentTree = subtreeOf(allExceptLast);\n    // copy to avoid recursive containment\n    parentTree[last] = JSON.parse(JSON.stringify(subtreeOf(alternative)));\n  });\n\n  function getAlternatives(string) {\n    return [...Object.entries(ALIASES), ...[['c', 'k']]].reduce(\n      (list, [alt, roma]) => (string.startsWith(roma) ? list.concat(string.replace(roma, alt)) : list),\n      []\n    );\n  }\n\n  Object.entries(SMALL_LETTERS).forEach(([kunreiRoma, kana]) => {\n    const last = (char) => char.charAt(char.length - 1);\n    const allExceptLast = (chars) => chars.slice(0, chars.length - 1);\n    const xRoma = `x${kunreiRoma}`;\n    const xSubtree = subtreeOf(xRoma);\n    xSubtree[''] = kana;\n\n    // ltu -> xtu -> っ\n    const parentTree = subtreeOf(`l${allExceptLast(kunreiRoma)}`);\n    parentTree[last(kunreiRoma)] = xSubtree;\n\n    // ltsu -> ltu -> っ\n    getAlternatives(kunreiRoma).forEach((altRoma) => {\n      ['l', 'x'].forEach((prefix) => {\n        const altParentTree = subtreeOf(prefix + allExceptLast(altRoma));\n        altParentTree[last(altRoma)] = subtreeOf(prefix + kunreiRoma);\n      });\n    });\n  });\n\n  Object.entries(SPECIAL_CASES).forEach(([string, kana]) => {\n    subtreeOf(string)[''] = kana;\n  });\n\n  // add kka, tta, etc.\n  function addTsu(tree) {\n    return Object.entries(tree).reduce((tsuTree, [key, value]) => {\n      if (!key) {\n        // we have reached the bottom of this branch\n        // eslint-disable-next-line no-param-reassign\n        tsuTree[key] = `っ${value}`;\n      } else {\n        // more subtrees\n        // eslint-disable-next-line no-param-reassign\n        tsuTree[key] = addTsu(value);\n      }\n      return tsuTree;\n    }, {});\n  }\n  // have to explicitly name c here, because we made it a copy of k, not a reference\n  [...Object.keys(CONSONANTS), 'c', 'y', 'w', 'j'].forEach((consonant) => {\n    const subtree = kanaTree[consonant];\n    subtree[consonant] = addTsu(subtree);\n  });\n  // nn should not be っん\n  delete kanaTree.n.n;\n  // solidify the results, so that there there is referential transparency within the tree\n  return Object.freeze(JSON.parse(JSON.stringify(kanaTree)));\n}\n\nlet romajiToKanaMap = null;\n\nexport function getRomajiToKanaTree() {\n  if (romajiToKanaMap == null) {\n    romajiToKanaMap = createRomajiToKanaMap();\n  }\n  return romajiToKanaMap;\n}\n\nexport const USE_OBSOLETE_KANA_MAP = createCustomMapping({\n  wi: 'ゐ',\n  we: 'ゑ',\n});\n\nexport function IME_MODE_MAP(map) {\n  // in IME mode, we do not want to convert single ns\n  const mapCopy = JSON.parse(JSON.stringify(map));\n  mapCopy.n.n = { '': 'ん' };\n  mapCopy.n[' '] = { '': 'ん' };\n  return mapCopy;\n}\n","import isEmpty from './isEmpty';\nimport isCharInRange from './isCharInRange';\nimport { LATIN_UPPERCASE_START, LATIN_UPPERCASE_END } from '../constants';\n\n/**\n * Tests if char is in English unicode uppercase range\n * @param  {String} char\n * @return {Boolean}\n */\nfunction isCharUpperCase(char = '') {\n  if (isEmpty(char)) return false;\n  return isCharInRange(char, LATIN_UPPERCASE_START, LATIN_UPPERCASE_END);\n}\n\nexport default isCharUpperCase;\n","import isEmpty from './isEmpty';\nimport { PROLONGED_SOUND_MARK } from '../constants';\n\n/**\n * Returns true if char is 'ー'\n * @param  {String} char to test\n * @return {Boolean}\n */\nfunction isCharLongDash(char = '') {\n  if (isEmpty(char)) return false;\n  return char.charCodeAt(0) === PROLONGED_SOUND_MARK;\n}\n\nexport default isCharLongDash;\n","import isEmpty from './isEmpty';\nimport { KANA_SLASH_DOT } from '../constants';\n\n/**\n * Tests if char is '・'\n * @param  {String} char\n * @return {Boolean} true if '・'\n */\nfunction isCharSlashDot(char = '') {\n  if (isEmpty(char)) return false;\n  return char.charCodeAt(0) === KANA_SLASH_DOT;\n}\n\nexport default isCharSlashDot;\n","import isEmpty from './isEmpty';\nimport isCharLongDash from './isCharLongDash';\nimport isCharInRange from './isCharInRange';\nimport {\n  HIRAGANA_START,\n  HIRAGANA_END,\n} from '../constants';\n\n/**\n * Tests a character. Returns true if the character is [Hiragana](https://en.wikipedia.org/wiki/Hiragana).\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharHiragana(char = '') {\n  if (isEmpty(char)) return false;\n  if (isCharLongDash(char)) return true;\n  return isCharInRange(char, HIRAGANA_START, HIRAGANA_END);\n}\n\nexport default isCharHiragana;\n","import { KATAKANA_START, HIRAGANA_START } from '../constants';\n\nimport isCharLongDash from './isCharLongDash';\nimport isCharSlashDot from './isCharSlashDot';\nimport isCharHiragana from './isCharHiragana';\n\n/**\n * Convert [Hiragana](https://en.wikipedia.org/wiki/Hiragana) to [Katakana](https://en.wikipedia.org/wiki/Katakana)\n * Passes through any non-hiragana chars\n * @private\n * @param  {String} [input=''] text input\n * @return {String} converted text\n * @example\n * hiraganaToKatakana('ひらがな')\n * // => \"ヒラガナ\"\n * hiraganaToKatakana('ひらがな is a type of kana')\n * // => \"ヒラガナ is a type of kana\"\n */\nfunction hiraganaToKatakana(input = '') {\n  const kata: string[] = [];\n  input.split('').forEach((char) => {\n    // Short circuit to avoid incorrect codeshift for 'ー' and '・'\n    if (isCharLongDash(char) || isCharSlashDot(char)) {\n      kata.push(char);\n    } else if (isCharHiragana(char)) {\n      // Shift charcode.\n      const code = char.charCodeAt(0) + (KATAKANA_START - HIRAGANA_START);\n      const kataChar = String.fromCharCode(code);\n      kata.push(kataChar);\n    } else {\n      // Pass non-hiragana chars through\n      kata.push(char);\n    }\n  });\n  return kata.join('');\n}\n\nexport default hiraganaToKatakana;\n","import memoizeOne from 'memoize-one';\nimport { dequal } from 'dequal';\n\nimport { TO_KANA_METHODS } from './constants';\nimport mergeWithDefaultOptions, { type Options } from './utils/mergeWithDefaultOptions';\nimport {\n  getRomajiToKanaTree,\n  IME_MODE_MAP,\n  USE_OBSOLETE_KANA_MAP,\n} from './utils/romajiToKanaMap';\nimport { applyMapping, mergeCustomMapping } from './utils/kanaMapping';\nimport isCharUpperCase from './utils/isCharUpperCase';\nimport hiraganaToKatakana from './utils/hiraganaToKatakana';\n\n// memoize and deeply compare args so we only recreate when necessary\nexport const createRomajiToKanaMap = memoizeOne(\n  (IMEMode, useObsoleteKana, customKanaMapping) => {\n    let map = getRomajiToKanaTree();\n\n    map = IMEMode ? IME_MODE_MAP(map) : map;\n    map = useObsoleteKana ? USE_OBSOLETE_KANA_MAP(map) : map;\n\n    if (customKanaMapping) {\n      map = mergeCustomMapping(map, customKanaMapping);\n    }\n\n    return map;\n  },\n  dequal\n);\n\n/**\n * Convert [Romaji](https://en.wikipedia.org/wiki/Romaji) to [Kana](https://en.wikipedia.org/wiki/Kana), lowercase text will result in [Hiragana](https://en.wikipedia.org/wiki/Hiragana) and uppercase text will result in [Katakana](https://en.wikipedia.org/wiki/Katakana).\n * @param  {String} [input=''] text\n * @param  {DefaultOptions} [options=defaultOptions]\n * @return {String} converted text\n * @example\n * toKana('onaji BUTTSUUJI')\n * // => 'おなじ ブッツウジ'\n * toKana('ONAJI buttsuuji')\n * // => 'オナジ ぶっつうじ'\n * toKana('座禅‘zazen’スタイル')\n * // => '座禅「ざぜん」スタイル'\n * toKana('batsuge-mu')\n * // => 'ばつげーむ'\n * toKana('!?.:/,~-‘’“”[](){}') // Punctuation conversion\n * // => '！？。：・、〜ー「」『』［］（）｛｝'\n * toKana('we', { useObsoleteKana: true })\n * // => 'ゑ'\n * toKana('wanakana', { customKanaMapping: { na: 'に', ka: 'bana' } });\n * // => 'わにbanaに'\n */\nexport function toKana(input = '', options: Partial<Options> = {}, map?: any) {\n  let config;\n  if (!map) {\n    config = mergeWithDefaultOptions(options);\n    map = createRomajiToKanaMap(\n      config.IMEMode,\n      config.useObsoleteKana,\n      config.customKanaMapping\n    );\n  } else {\n    config = options;\n  }\n\n  // throw away the substring index information and just concatenate all the kana\n  return splitIntoConvertedKana(input, config, map)\n    .map((kanaToken) => {\n      const [start, end, kana] = kanaToken;\n      if (kana === null) {\n        // haven't converted the end of the string, since we are in IME mode\n        return input.slice(start);\n      }\n      const enforceHiragana = config.IMEMode === TO_KANA_METHODS.HIRAGANA;\n      const enforceKatakana = config.IMEMode === TO_KANA_METHODS.KATAKANA\n        || [...input.slice(start, end)].every(isCharUpperCase);\n\n      return enforceHiragana || !enforceKatakana\n        ? kana\n        : hiraganaToKatakana(kana);\n    })\n    .join('');\n}\n\n/**\n *\n * @private\n * @param {String} [input=''] input text\n * @param {DefaultOptions} [options=defaultOptions] toKana options\n * @param {Object} [map] custom mapping\n * @returns {Array[]} [[start, end, token]]\n * @example\n * splitIntoConvertedKana('buttsuuji')\n * // => [[0, 2, 'ぶ'], [2, 6, 'っつ'], [6, 7, 'う'], [7, 9, 'じ']]\n */\nexport function splitIntoConvertedKana(input = '', options: Partial<Options> = {}, map): [start: number, end: number, kana: string][] {\n  const { IMEMode, useObsoleteKana, customKanaMapping } = options;\n\n  if (!map) {\n    map = createRomajiToKanaMap(IMEMode, useObsoleteKana, customKanaMapping);\n  }\n\n  return applyMapping(input.toLowerCase(), map, !IMEMode);\n}\n\nexport default toKana;\n","import isJapanese from '../isJapanese';\nimport toKana, { createRomajiToKanaMap } from '../toKana';\nimport mergeWithDefaultOptions from './mergeWithDefaultOptions';\n\nlet LISTENERS: {id: string, inputHandler: unknown, compositionHandler: unknown}[] = [];\n/**\n * Automagically replaces input values with converted text to kana\n * @param  {defaultOptions} [options] user config overrides, default conversion is toKana()\n * @return {Function} event handler with bound options\n * @private\n */\nexport function makeOnInput(options) {\n  let prevInput;\n\n  // Enforce IMEMode if not already specified\n  const mergedConfig = Object.assign({}, mergeWithDefaultOptions(options), {\n    IMEMode: options.IMEMode || true,\n  });\n\n  const preConfiguredMap = createRomajiToKanaMap(\n    mergedConfig.IMEMode,\n    mergedConfig.useObsoleteKana,\n    mergedConfig.customKanaMapping\n  );\n\n  const triggers = [\n    ...Object.keys(preConfiguredMap),\n    ...Object.keys(preConfiguredMap).map((char) => char.toUpperCase()),\n  ];\n\n  return function onInput({ target }) {\n    if (\n      target.value !== prevInput\n      && target.dataset.ignoreComposition !== 'true'\n    ) {\n      convertInput(target, mergedConfig, preConfiguredMap, triggers, prevInput);\n    }\n  };\n}\n\nexport function convertInput(target, options, map, triggers, prevInput) {\n  const [head, textToConvert, tail] = splitInput(\n    target.value,\n    target.selectionEnd,\n    triggers\n  );\n  const convertedText = toKana(textToConvert, options, map);\n  const changed = textToConvert !== convertedText;\n\n  if (changed) {\n    const newCursor = head.length + convertedText.length;\n    const newValue = head + convertedText + tail;\n    // eslint-disable-next-line no-param-reassign\n    target.value = newValue;\n    // eslint-disable-next-line no-param-reassign\n    prevInput = newValue;\n\n    if (tail.length) {\n      // push later on event loop (otherwise mid-text insertion can be 1 char too far to the right)\n      setTimeout(() => target.setSelectionRange(newCursor, newCursor), 1);\n    } else {\n      target.setSelectionRange(newCursor, newCursor);\n    }\n  } else {\n    // eslint-disable-next-line no-param-reassign\n    prevInput = target.value;\n  }\n}\n\nexport function onComposition({ type, target, data }) {\n  // navigator.platform is not 100% reliable for singling out all OS,\n  // but for determining desktop \"Mac OS\" it is effective enough.\n  const isMacOS = /Mac/.test(window.navigator && window.navigator.platform);\n  // We don't want to ignore on Android:\n  // https://github.com/WaniKani/WanaKana/issues/82\n  // But MacOS IME auto-closes if we don't ignore:\n  // https://github.com/WaniKani/WanaKana/issues/71\n  // Other platform Japanese IMEs pass through happily\n  if (isMacOS) {\n    if (type === 'compositionupdate' && isJapanese(data)) {\n      // eslint-disable-next-line no-param-reassign\n      target.dataset.ignoreComposition = 'true';\n    }\n\n    if (type === 'compositionend') {\n      // eslint-disable-next-line no-param-reassign\n      target.dataset.ignoreComposition = 'false';\n    }\n  }\n}\n\nexport function trackListeners(id, inputHandler, compositionHandler) {\n  LISTENERS = LISTENERS.concat({\n    id,\n    inputHandler,\n    compositionHandler,\n  });\n}\n\nexport function untrackListeners({ id: targetId }) {\n  LISTENERS = LISTENERS.filter(({ id }) => id !== targetId);\n}\n\nexport function findListeners(el) {\n  return (\n    el && LISTENERS.find(({ id }) => id === el.getAttribute('data-wanakana-id'))\n  );\n}\n\n// Handle non-terminal inserted input conversion:\n// | -> わ| -> わび| -> わ|び -> わs|び -> わsh|び -> わshi|び -> わし|び\n// or multiple ambiguous positioning (to select which \"s\" to work from)\n// こsこs|こsこ -> こsこso|こsこ -> こsこそ|こsこ\nexport function splitInput(text = '', cursor = 0, triggers = []) {\n  let head;\n  let toConvert;\n  let tail;\n\n  if (cursor === 0 && triggers.includes(text[0])) {\n    [head, toConvert, tail] = workFromStart(text, triggers);\n  } else if (cursor > 0) {\n    [head, toConvert, tail] = workBackwards(text, cursor);\n  } else {\n    [head, toConvert] = takeWhileAndSlice(\n      text,\n      (char) => !triggers.includes(char)\n    );\n    [toConvert, tail] = takeWhileAndSlice(\n      toConvert,\n      (char) => !isJapanese(char)\n    );\n  }\n\n  return [head, toConvert, tail];\n}\n\nfunction workFromStart(text, catalystChars) {\n  return [\n    '',\n    ...takeWhileAndSlice(\n      text,\n      (char) => catalystChars.includes(char) || !isJapanese(char, /[0-9]/)\n    ),\n  ];\n}\n\nfunction workBackwards(text = '', startIndex = 0) {\n  const [toConvert, head] = takeWhileAndSlice(\n    [...text.slice(0, startIndex)].reverse(),\n    (char) => !isJapanese(char)\n  );\n  return [\n    head.reverse().join(''),\n    toConvert\n      .split('')\n      .reverse()\n      .join(''),\n    text.slice(startIndex),\n  ];\n}\n\nfunction takeWhileAndSlice(source = {}, predicate = (x) => !!x) {\n  const result = [];\n  const { length } = source;\n  let i = 0;\n  while (i < length && predicate(source[i], i)) {\n    result.push(source[i]);\n    i += 1;\n  }\n  return [result.join(''), source.slice(i)];\n}\n","/* eslint-disable no-console */\nconst onInput = ({ target: { value, selectionStart, selectionEnd } }) => console.log('input:', { value, selectionStart, selectionEnd });\nconst onCompositionStart = () => console.log('compositionstart');\nconst onCompositionUpdate = ({\n  target: { value, selectionStart, selectionEnd },\n  data,\n}) => console.log('compositionupdate', {\n  data,\n  value,\n  selectionStart,\n  selectionEnd,\n});\nconst onCompositionEnd = () => console.log('compositionend');\n\nconst events = {\n  input: onInput,\n  compositionstart: onCompositionStart,\n  compositionupdate: onCompositionUpdate,\n  compositionend: onCompositionEnd,\n};\n\nexport const addDebugListeners = (input) => {\n  Object.entries(events).forEach(([event, handler]) => input.addEventListener(event, handler)\n  );\n};\n\nexport const removeDebugListeners = (input) => {\n  Object.entries(events).forEach(([event, handler]) => input.removeEventListener(event, handler)\n  );\n};\n","import { makeOnInput, onComposition, trackListeners } from './utils/dom';\nimport { addDebugListeners } from './utils/logInputEvents';\n\nconst ELEMENTS = ['TEXTAREA', 'INPUT'];\n\nlet idCounter = 0;\nconst newId = () => {\n  idCounter += 1;\n  return `${Date.now()}${idCounter}`;\n};\n\n/**\n * Binds eventListener for 'input' events to an input field to automagically replace values with kana\n * Can pass `{ IMEMode: 'toHiragana' || 'toKatakana' }` to enforce kana conversion type\n * @param  {HTMLElement} element textarea, input[type=\"text\"] etc\n * @param  {DefaultOptions} [options=defaultOptions] defaults to { IMEMode: true } using `toKana`\n * @example\n * bind(document.querySelector('#myInput'));\n */\nfunction bind(element: HTMLElement, options = {}, debug = false) {\n  if (!ELEMENTS.includes(element.nodeName)) {\n    throw new Error(\n      `Element provided to Wanakana bind() was not a valid input or textarea element.\\n Received: (${JSON.stringify(\n        element\n      )})`\n    );\n  }\n  const onInput = makeOnInput(options);\n  const id = newId();\n  element.setAttribute('data-wanakana-id', id);\n  element.setAttribute('lang', 'ja');\n  element.setAttribute('autoCapitalize', 'none');\n  element.setAttribute('autoCorrect', 'off');\n  element.setAttribute('autoComplete', 'off');\n  element.setAttribute('spellCheck', 'false');\n  element.addEventListener('input', onInput);\n  element.addEventListener('compositionupdate', onComposition);\n  element.addEventListener('compositionend', onComposition);\n  trackListeners(id, onInput, onComposition);\n  if (debug === true) {\n    addDebugListeners(element);\n  }\n}\n\nexport default bind;\n","import { findListeners, untrackListeners } from './utils/dom';\nimport { removeDebugListeners } from './utils/logInputEvents';\n\n/**\n * Unbinds eventListener from input field\n * @param  {HTMLElement} element textarea, input\n */\nexport function unbind(element: HTMLElement, debug = false) {\n  const listeners = findListeners(element);\n  if (listeners == null) {\n    throw new Error(\n      `Element provided to Wanakana unbind() had no listener registered.\\n Received: ${JSON.stringify(\n        element\n      )}`\n    );\n  }\n  const { inputHandler, compositionHandler } = listeners;\n  element.removeAttribute('data-wanakana-id');\n  element.removeAttribute('data-ignore-composition');\n  element.removeEventListener('input', inputHandler);\n  element.removeEventListener('compositionstart', compositionHandler);\n  element.removeEventListener('compositionupdate', compositionHandler);\n  element.removeEventListener('compositionend', compositionHandler);\n  untrackListeners(listeners);\n  if (debug === true) {\n    removeDebugListeners(element);\n  }\n}\n\nexport default unbind;\n","import isEmpty from './isEmpty';\nimport isCharInRange from './isCharInRange';\nimport { ROMAJI_RANGES } from '../constants';\n\n/**\n * Tests a character. Returns true if the character is [Romaji](https://en.wikipedia.org/wiki/Romaji) (allowing [Hepburn romanisation](https://en.wikipedia.org/wiki/Hepburn_romanization))\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharRomaji(char = '') {\n  if (isEmpty(char)) return false;\n  return ROMAJI_RANGES.some(([start, end]) => isCharInRange(char, start, end));\n}\n\nexport default isCharRomaji;\n","import typeOf from './utils/typeOf';\nimport isEmpty from './utils/isEmpty';\nimport isCharRomaji from './utils/isCharRomaji';\n\n/**\n * Test if `input` is [Romaji](https://en.wikipedia.org/wiki/Romaji) (allowing [Hepburn romanisation](https://en.wikipedia.org/wiki/Hepburn_romanization))\n * @param  {String} [input=''] text\n * @param  {Regexp} [allowed] additional test allowed to pass for each char\n * @return {Boolean} true if [Romaji](https://en.wikipedia.org/wiki/Romaji)\n * @example\n * isRomaji('Tōkyō and Ōsaka')\n * // => true\n * isRomaji('12a*b&c-d')\n * // => true\n * isRomaji('あアA')\n * // => false\n * isRomaji('お願い')\n * // => false\n * isRomaji('a！b&cーd') // Zenkaku punctuation fails\n * // => false\n * isRomaji('a！b&cーd', /[！ー]/)\n * // => true\n */\nfunction isRomaji(input = '', allowed?: RegExp) {\n  const augmented = typeOf(allowed) === 'regexp';\n  return isEmpty(input)\n    ? false\n    : [...input].every((char) => {\n      const isRoma = isCharRomaji(char);\n      return !augmented ? isRoma : isRoma || allowed!.test(char);\n    });\n}\n\nexport default isRomaji;\n","import {\n  KATAKANA_START,\n  KATAKANA_END,\n} from '../constants';\n\nimport isCharInRange from './isCharInRange';\n\n/**\n * Tests a character. Returns true if the character is [Katakana](https://en.wikipedia.org/wiki/Katakana).\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharKatakana(char = '') {\n  return isCharInRange(char, KATAKANA_START, KATAKANA_END);\n}\n\nexport default isCharKatakana;\n","import isEmpty from './isEmpty';\nimport isCharHiragana from './isCharHiragana';\nimport isCharKatakana from './isCharKatakana';\n\n/**\n * Tests a character. Returns true if the character is [Hiragana](https://en.wikipedia.org/wiki/Hiragana) or [Katakana](https://en.wikipedia.org/wiki/Katakana).\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharKana(char = '') {\n  if (isEmpty(char)) return false;\n  return isCharHiragana(char) || isCharKatakana(char);\n}\n\nexport default isCharKana;\n","import isEmpty from './utils/isEmpty';\nimport isCharKana from './utils/isCharKana';\n\n/**\n * Test if `input` is [Kana](https://en.wikipedia.org/wiki/Kana) ([Katakana](https://en.wikipedia.org/wiki/Katakana) and/or [Hiragana](https://en.wikipedia.org/wiki/Hiragana))\n * @param  {String} [input=''] text\n * @return {Boolean} true if all [Kana](https://en.wikipedia.org/wiki/Kana)\n * @example\n * isKana('あ')\n * // => true\n * isKana('ア')\n * // => true\n * isKana('あーア')\n * // => true\n * isKana('A')\n * // => false\n * isKana('あAア')\n * // => false\n */\nfunction isKana(input = '') {\n  if (isEmpty(input)) return false;\n  return [...input].every(isCharKana);\n}\n\nexport default isKana;\n","import isEmpty from './utils/isEmpty';\nimport isCharHiragana from './utils/isCharHiragana';\n\n/**\n * Test if `input` is [Hiragana](https://en.wikipedia.org/wiki/Hiragana)\n * @param  {String} [input=''] text\n * @return {Boolean} true if all [Hiragana](https://en.wikipedia.org/wiki/Hiragana)\n * @example\n * isHiragana('げーむ')\n * // => true\n * isHiragana('A')\n * // => false\n * isHiragana('あア')\n * // => false\n */\nfunction isHiragana(input = '') {\n  if (isEmpty(input)) return false;\n  return [...input].every(isCharHiragana);\n}\n\nexport default isHiragana;\n","import isEmpty from './utils/isEmpty';\nimport isCharKatakana from './utils/isCharKatakana';\n\n/**\n * Test if `input` is [Katakana](https://en.wikipedia.org/wiki/Katakana)\n * @param  {String} [input=''] text\n * @return {Boolean} true if all [Katakana](https://en.wikipedia.org/wiki/Katakana)\n * @example\n * isKatakana('ゲーム')\n * // => true\n * isKatakana('あ')\n * // => false\n * isKatakana('A')\n * // => false\n * isKatakana('あア')\n * // => false\n */\nfunction isKatakana(input = '') {\n  if (isEmpty(input)) return false;\n  return [...input].every(isCharKatakana);\n}\n\nexport default isKatakana;\n","import {\n  KANJI_START,\n  KANJI_END,\n} from '../constants';\n\nimport isCharInRange from './isCharInRange';\n/**\n * Tests a character. Returns true if the character is a CJK ideograph (kanji).\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharKanji(char = '') {\n  return isCharInRange(char, KANJI_START, KANJI_END);\n}\n\nexport default isCharKanji;\n","import isEmpty from './utils/isEmpty';\nimport isCharKanji from './utils/isCharKanji';\n\n/**\n * Tests if `input` is [Kanji](https://en.wikipedia.org/wiki/Kanji) ([Japanese CJK ideographs](https://en.wikipedia.org/wiki/CJK_Unified_Ideographs))\n * @param  {String} [input=''] text\n * @return {Boolean} true if all [Kanji](https://en.wikipedia.org/wiki/Kanji)\n * @example\n * isKanji('刀')\n * // => true\n * isKanji('切腹')\n * // => true\n * isKanji('勢い')\n * // => false\n * isKanji('あAア')\n * // => false\n * isKanji('🐸')\n * // => false\n */\nfunction isKanji(input = '') {\n  if (isEmpty(input)) return false;\n  return [...input].every(isCharKanji);\n}\n\nexport default isKanji;\n","import isKanji from './isKanji';\nimport isHiragana from './isHiragana';\nimport isKatakana from './isKatakana';\nimport isRomaji from './isRomaji';\n\n/**\n * Test if `input` contains a mix of [Romaji](https://en.wikipedia.org/wiki/Romaji) *and* [Kana](https://en.wikipedia.org/wiki/Kana), defaults to pass through [Kanji](https://en.wikipedia.org/wiki/Kanji)\n * @param  {String} input text\n * @param  {Object} [options={ passKanji: true }] optional config to pass through kanji\n * @return {Boolean} true if mixed\n * @example\n * isMixed('Abあア'))\n * // => true\n * isMixed('お腹A')) // ignores kanji by default\n * // => true\n * isMixed('お腹A', { passKanji: false }))\n * // => false\n * isMixed('ab'))\n * // => false\n * isMixed('あア'))\n * // => false\n */\nfunction isMixed(input = '', options = { passKanji: true }) {\n  const chars = [...input];\n  let hasKanji = false;\n  if (!options.passKanji) {\n    hasKanji = chars.some(isKanji);\n  }\n  return (chars.some(isHiragana) || chars.some(isKatakana)) && chars.some(isRomaji) && !hasKanji;\n}\n\nexport default isMixed;\n","import { KATAKANA_START, HIRAGANA_START } from '../constants';\n\nimport isCharLongDash from './isCharLongDash';\nimport isCharSlashDot from './isCharSlashDot';\nimport isCharKatakana from './isCharKatakana';\nconst isCharInitialLongDash = (char?: string, index: number) => isCharLongDash(char) && index < 1;\nconst isCharInnerLongDash = (char?: string, index: number) => isCharLongDash(char) && index > 0;\nconst isKanaAsSymbol = (char) => ['ヶ', 'ヵ'].includes(char);\nconst LONG_VOWELS = {\n  a: 'あ',\n  i: 'い',\n  u: 'う',\n  e: 'え',\n  o: 'う',\n};\n\n// inject toRomaji to avoid circular dependency between toRomaji <-> katakanaToHiragana\nfunction katakanaToHiragana(\n  input = '',\n  toRomaji,\n  { isDestinationRomaji, convertLongVowelMark } = {}\n) {\n  let previousKana = '';\n\n  return input\n    .split('')\n    .reduce((hira: string[], char: string, index) => {\n      // Short circuit to avoid incorrect codeshift for 'ー' and '・'\n      if (\n        isCharSlashDot(char)\n        || isCharInitialLongDash(char, index)\n        || isKanaAsSymbol(char)\n      ) {\n        return hira.concat(char);\n      }\n\n      // Transform long vowels: 'オー' to 'おう'\n      if (\n        convertLongVowelMark\n        && previousKana\n        && isCharInnerLongDash(char, index)\n      ) {\n        // Transform previousKana back to romaji, and slice off the vowel\n        const romaji = toRomaji(previousKana).slice(-1);\n        // However, ensure 'オー' => 'おお' => 'oo' if this is a transform on the way to romaji\n        if (\n          isCharKatakana(input[index - 1])\n          && romaji === 'o'\n          && isDestinationRomaji\n        ) {\n          return hira.concat('お');\n        }\n        return hira.concat(LONG_VOWELS[romaji]);\n        // Transform all other chars\n      }\n\n      if (!isCharLongDash(char) && isCharKatakana(char)) {\n        const code = char.charCodeAt(0) + (HIRAGANA_START - KATAKANA_START);\n        const hiraChar = String.fromCharCode(code);\n        previousKana = hiraChar;\n        return hira.concat(hiraChar);\n      }\n\n      // Pass non katakana chars through\n      previousKana = '';\n      return hira.concat(char);\n    }, [])\n    .join('');\n}\n\nexport default katakanaToHiragana;\n","import { transform, getSubTreeOf } from './kanaMapping';\nimport { ROMANIZATIONS } from '../constants';\n\nlet kanaToHepburnMap: object | null;\n\n/* eslint-disable */\n// prettier-ignore\nconst BASIC_ROMAJI = {\n  あ:'a',    い:'i',   う:'u',   え:'e',    お:'o',\n  か:'ka',   き:'ki',  く:'ku',  け:'ke',   こ:'ko',\n  さ:'sa',   し:'shi', す:'su',  せ:'se',   そ:'so',\n  た:'ta',   ち:'chi', つ:'tsu', て:'te',   と:'to',\n  な:'na',   に:'ni',  ぬ:'nu',  ね:'ne',   の:'no',\n  は:'ha',   ひ:'hi',  ふ:'fu',  へ:'he',   ほ:'ho',\n  ま:'ma',   み:'mi',  む:'mu',  め:'me',   も:'mo',\n  ら:'ra',   り:'ri',  る:'ru',  れ:'re',   ろ:'ro',\n  や:'ya',   ゆ:'yu',  よ:'yo',\n  わ:'wa',   ゐ:'wi',  ゑ:'we',  を:'wo',\n  ん: 'n',\n  が:'ga',   ぎ:'gi',  ぐ:'gu',  げ:'ge',   ご:'go',\n  ざ:'za',   じ:'ji',  ず:'zu',  ぜ:'ze',   ぞ:'zo',\n  だ:'da',   ぢ:'ji',  づ:'zu',  で:'de',   ど:'do',\n  ば:'ba',   び:'bi',  ぶ:'bu',  べ:'be',   ぼ:'bo',\n  ぱ:'pa',   ぴ:'pi',  ぷ:'pu',  ぺ:'pe',   ぽ:'po',\n  ゔぁ:'va', ゔぃ:'vi', ゔ:'vu',  ゔぇ:'ve', ゔぉ:'vo',\n};\n/* eslint-enable  */\n\nconst SPECIAL_SYMBOLS = {\n  '。': '.',\n  '、': ',',\n  '：': ':',\n  '・': '/',\n  '！': '!',\n  '？': '?',\n  '〜': '~',\n  'ー': '-',\n  '「': '‘',\n  '」': '’',\n  '『': '“',\n  '』': '”',\n  '［': '[',\n  '］': ']',\n  '（': '(',\n  '）': ')',\n  '｛': '{',\n  '｝': '}',\n  '　': ' ',\n};\n\n// んい -> n'i\nconst AMBIGUOUS_VOWELS = ['あ', 'い', 'う', 'え', 'お', 'や', 'ゆ', 'よ'];\nconst SMALL_Y = { ゃ: 'ya', ゅ: 'yu', ょ: 'yo' };\nconst SMALL_Y_EXTRA = { ぃ: 'yi', ぇ: 'ye' };\nconst SMALL_AIUEO = {\n  ぁ: 'a',\n  ぃ: 'i',\n  ぅ: 'u',\n  ぇ: 'e',\n  ぉ: 'o',\n};\nconst YOON_KANA = [\n  'き',\n  'に',\n  'ひ',\n  'み',\n  'り',\n  'ぎ',\n  'び',\n  'ぴ',\n  'ゔ',\n  'く',\n  'ふ',\n];\nconst YOON_EXCEPTIONS = {\n  し: 'sh',\n  ち: 'ch',\n  じ: 'j',\n  ぢ: 'j',\n};\nconst SMALL_KANA = {\n  っ: '',\n  ゃ: 'ya',\n  ゅ: 'yu',\n  ょ: 'yo',\n  ぁ: 'a',\n  ぃ: 'i',\n  ぅ: 'u',\n  ぇ: 'e',\n  ぉ: 'o',\n};\n\n// going with the intuitive (yet incorrect) solution where っや -> yya and っぃ -> ii\n// in other words, just assume the sokuon could have been applied to anything\nconst SOKUON_WHITELIST = {\n  b: 'b',\n  c: 't',\n  d: 'd',\n  f: 'f',\n  g: 'g',\n  h: 'h',\n  j: 'j',\n  k: 'k',\n  m: 'm',\n  p: 'p',\n  q: 'q',\n  r: 'r',\n  s: 's',\n  t: 't',\n  v: 'v',\n  w: 'w',\n  x: 'x',\n  z: 'z',\n};\n\nfunction getKanaToHepburnTree() {\n  if (kanaToHepburnMap == null) {\n    kanaToHepburnMap = createKanaToHepburnMap();\n  }\n  return kanaToHepburnMap;\n}\n\nexport function getKanaToRomajiTree(romanization) {\n  switch (romanization) {\n    case ROMANIZATIONS.HEPBURN:\n      return getKanaToHepburnTree();\n    default:\n      return {};\n  }\n}\n\nfunction createKanaToHepburnMap(): object {\n  const romajiTree = transform(BASIC_ROMAJI);\n\n  const subtreeOf = (string) => getSubTreeOf(romajiTree, string);\n  const setTrans = (string, transliteration) => {\n    subtreeOf(string)[''] = transliteration;\n  };\n\n  Object.entries(SPECIAL_SYMBOLS).forEach(([jsymbol, symbol]) => {\n    subtreeOf(jsymbol)[''] = symbol;\n  });\n\n  [...Object.entries(SMALL_Y), ...Object.entries(SMALL_AIUEO)].forEach(\n    ([roma, kana]) => {\n      setTrans(roma, kana);\n    }\n  );\n\n  // きゃ -> kya\n  YOON_KANA.forEach((kana) => {\n    const firstRomajiChar = subtreeOf(kana)[''][0];\n    Object.entries(SMALL_Y).forEach(([yKana, yRoma]) => {\n      setTrans(kana + yKana, firstRomajiChar + yRoma);\n    });\n    // きぃ -> kyi\n    Object.entries(SMALL_Y_EXTRA).forEach(([yKana, yRoma]) => {\n      setTrans(kana + yKana, firstRomajiChar + yRoma);\n    });\n  });\n\n  Object.entries(YOON_EXCEPTIONS).forEach(([kana, roma]) => {\n    // じゃ -> ja\n    Object.entries(SMALL_Y).forEach(([yKana, yRoma]) => {\n      setTrans(kana + yKana, roma + yRoma[1]);\n    });\n    // じぃ -> jyi, じぇ -> je\n    setTrans(`${kana}ぃ`, `${roma}yi`);\n    setTrans(`${kana}ぇ`, `${roma}e`);\n  });\n\n  romajiTree['っ'] = resolveTsu(romajiTree);\n\n  Object.entries(SMALL_KANA).forEach(([kana, roma]) => {\n    setTrans(kana, roma);\n  });\n\n  AMBIGUOUS_VOWELS.forEach((kana) => {\n    setTrans(`ん${kana}`, `n'${subtreeOf(kana)['']}`);\n  });\n\n  // NOTE: could be re-enabled with an option?\n  // // んば -> mbo\n  // const LABIAL = [\n  //   'ば', 'び', 'ぶ', 'べ', 'ぼ',\n  //   'ぱ', 'ぴ', 'ぷ', 'ぺ', 'ぽ',\n  //   'ま', 'み', 'む', 'め', 'も',\n  // ];\n  // LABIAL.forEach((kana) => {\n  //   setTrans(`ん${kana}`, `m${subtreeOf(kana)['']}`);\n  // });\n\n  return Object.freeze(JSON.parse(JSON.stringify(romajiTree)));\n}\n\nfunction resolveTsu(tree) {\n  return Object.entries(tree).reduce((tsuTree, [key, value]) => {\n    if (!key) {\n      // we have reached the bottom of this branch\n      const consonant = value.charAt(0);\n      // eslint-disable-next-line no-param-reassign\n      tsuTree[key] = Object.keys(SOKUON_WHITELIST).includes(consonant)\n        ? SOKUON_WHITELIST[consonant] + value\n        : value;\n    } else {\n      // more subtrees\n      // eslint-disable-next-line no-param-reassign\n      tsuTree[key] = resolveTsu(value);\n    }\n    return tsuTree;\n  }, {});\n}\n","import memoizeOne from 'memoize-one';\nimport { dequal } from 'dequal';\n\nimport mergeWithDefaultOptions, { type Options } from './utils/mergeWithDefaultOptions';\nimport katakanaToHiragana from './utils/katakanaToHiragana';\nimport isKatakana from './isKatakana';\nimport { getKanaToRomajiTree } from './utils/kanaToRomajiMap';\nimport { applyMapping, mergeCustomMapping } from './utils/kanaMapping';\n\n// memoize and deeply compare args so we only recreate when necessary\nexport const createKanaToRomajiMap = memoizeOne(\n  (romanization, customRomajiMapping) => {\n    let map = getKanaToRomajiTree(romanization);\n\n    if (customRomajiMapping) {\n      map = mergeCustomMapping(map, customRomajiMapping);\n    }\n\n    return map;\n  },\n  dequal\n);\n\n/**\n * Convert kana to romaji\n * @param  {String} kana text input\n * @param  {DefaultOptions} [options=defaultOptions]\n * @param  {Object} map custom mapping\n * @return {String} converted text\n * @example\n * toRomaji('ひらがな　カタカナ')\n * // => 'hiragana katakana'\n * toRomaji('げーむ　ゲーム')\n * // => 'ge-mu geemu'\n * toRomaji('ひらがな　カタカナ', { upcaseKatakana: true })\n * // => 'hiragana KATAKANA'\n * toRomaji('つじぎり', { customRomajiMapping: { じ: 'zi', つ: 'tu', り: 'li' } });\n * // => 'tuzigili'\n */\nexport function toRomaji(input = '', options: Partial<Options> = {}, map?: unknown) {\n  const config = mergeWithDefaultOptions(options);\n\n  if (!map) {\n    map = createKanaToRomajiMap(\n      config.romanization,\n      config.customRomajiMapping\n    );\n  }\n\n  // just throw away the substring index information and simply concatenate all the kana\n  return splitIntoRomaji(input, config, map)\n    .map((romajiToken) => {\n      const [start, end, romaji] = romajiToken;\n      const makeUpperCase = config.upcaseKatakana && isKatakana(input.slice(start, end));\n      return makeUpperCase ? romaji.toUpperCase() : romaji;\n    })\n    .join('');\n}\n\nfunction splitIntoRomaji(input, options, map) {\n  if (!map) {\n    map = createKanaToRomajiMap(\n      options.romanization,\n      options.customRomajiMapping\n    );\n  }\n\n  const config = Object.assign({}, { isDestinationRomaji: true }, options);\n\n  return applyMapping(\n    katakanaToHiragana(input, toRomaji, config),\n    map,\n    !options.IMEMode\n  );\n}\n\nexport default toRomaji;\n","import isEmpty from './isEmpty';\nimport { EN_PUNCTUATION_RANGES } from '../constants';\nimport isCharInRange from './isCharInRange';\n\n/**\n * Tests a character. Returns true if the character is considered English punctuation.\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharEnglishPunctuation(char = '') {\n  if (isEmpty(char)) return false;\n  return EN_PUNCTUATION_RANGES.some(([start, end]) => isCharInRange(char, start, end));\n}\n\nexport default isCharEnglishPunctuation;\n","import mergeWithDefaultOptions from './utils/mergeWithDefaultOptions';\nimport katakanaToHiragana from './utils/katakanaToHiragana';\nimport isCharEnglishPunctuation from './utils/isCharEnglishPunctuation';\nimport isRomaji from './isRomaji';\nimport isMixed from './isMixed';\nimport toKana from './toKana';\nimport toRomaji from './toRomaji';\n\n/**\n * Convert input to [Hiragana](https://en.wikipedia.org/wiki/Hiragana)\n * @param  {String} [input=''] text\n * @param  {DefaultOptions} [options=defaultOptions]\n * @return {String} converted text\n * @example\n * toHiragana('toukyou, オオサカ')\n * // => 'とうきょう、　おおさか'\n * toHiragana('only カナ', { passRomaji: true })\n * // => 'only かな'\n * toHiragana('wi')\n * // => 'うぃ'\n * toHiragana('wi', { useObsoleteKana: true })\n * // => 'ゐ'\n */\nfunction toHiragana(input = '', options = {}) {\n  const config = mergeWithDefaultOptions(options);\n  if (config.passRomaji) {\n    return katakanaToHiragana(input, toRomaji, config);\n  }\n\n  if (isMixed(input, { passKanji: true })) {\n    const convertedKatakana = katakanaToHiragana(input, toRomaji, config);\n    return toKana(convertedKatakana.toLowerCase(), config);\n  }\n\n  if (isRomaji(input) || isCharEnglishPunctuation(input)) {\n    return toKana(input.toLowerCase(), config);\n  }\n\n  return katakanaToHiragana(input, toRomaji, config);\n}\n\nexport default toHiragana;\n","import mergeWithDefaultOptions, { type Options } from './utils/mergeWithDefaultOptions';\nimport hiraganaToKatakana from './utils/hiraganaToKatakana';\nimport isCharEnglishPunctuation from './utils/isCharEnglishPunctuation';\nimport toKana from './toKana';\nimport isRomaji from './isRomaji';\nimport isMixed from './isMixed';\n\n/**\n * Convert input to [Katakana](https://en.wikipedia.org/wiki/Katakana)\n * @param  {String} [input=''] text\n * @param  {DefaultOptions} [options=defaultOptions]\n * @return {String} converted text\n * @example\n * toKatakana('toukyou, おおさか')\n * // => 'トウキョウ、　オオサカ'\n * toKatakana('only かな', { passRomaji: true })\n * // => 'only カナ'\n * toKatakana('wi')\n * // => 'ウィ'\n * toKatakana('wi', { useObsoleteKana: true })\n * // => 'ヰ'\n */\nfunction toKatakana(input = '', options: Partial<Options> = {}) {\n  const mergedOptions = mergeWithDefaultOptions(options);\n  if (mergedOptions.passRomaji) {\n    return hiraganaToKatakana(input);\n  }\n\n  if (isMixed(input) || isRomaji(input) || isCharEnglishPunctuation(input)) {\n    const hiragana = toKana(input.toLowerCase(), mergedOptions);\n    return hiraganaToKatakana(hiragana);\n  }\n\n  return hiraganaToKatakana(input);\n}\n\nexport default toKatakana;\n","import isEmpty from './isEmpty';\nimport { JA_PUNCTUATION_RANGES } from '../constants';\nimport isCharInRange from './isCharInRange';\n\n/**\n * Tests a character. Returns true if the character is considered English punctuation.\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharJapanesePunctuation(char = '') {\n  if (isEmpty(char)) return false;\n  return JA_PUNCTUATION_RANGES.some(([start, end]) => isCharInRange(char, start, end));\n}\n\nexport default isCharJapanesePunctuation;\n","import isEmpty from './utils/isEmpty';\nimport isCharEnglishPunctuation from './utils/isCharEnglishPunctuation';\nimport isCharJapanesePunctuation from './utils/isCharJapanesePunctuation';\nimport isCharRomaji from './utils/isCharRomaji';\nimport isCharKanji from './utils/isCharKanji';\nimport isCharHiragana from './utils/isCharHiragana';\nimport isCharKatakana from './utils/isCharKatakana';\nimport isCharJapanese from './utils/isCharJapanese';\n\nconst isCharEnSpace = (x: unknown) => x === ' ';\nconst isCharJaSpace = (x): unknown => x === '　';\nconst isCharJaNum = (x: unknown) => typeof x === 'string' && /[０-９]/.test(x);\nconst isCharEnNum = (x: unknown) => typeof x === 'string' && /[0-9]/.test(x);\n\nexport const TOKEN_TYPES = {\n  EN: 'en' as const,\n  JA: 'ja',\n  EN_NUM: 'englishNumeral',\n  JA_NUM: 'japaneseNumeral',\n  EN_PUNC: 'englishPunctuation',\n  JA_PUNC: 'japanesePunctuation',\n  KANJI: 'kanji',\n  HIRAGANA: 'hiragana',\n  KATAKANA: 'katakana',\n  SPACE: 'space',\n  OTHER: 'other' as const,\n} as const;\n\ntype TokenType = typeof TOKEN_TYPES;\n\n// prettier-ignore\nexport function getType(input, compact = false): TokenType {\n  const {\n    EN, JA, EN_NUM, JA_NUM, EN_PUNC, JA_PUNC, KANJI, HIRAGANA, KATAKANA, SPACE, OTHER,\n  } = TOKEN_TYPES;\n\n  if (compact) {\n    switch (true) {\n      case isCharJaNum(input): return TOKEN_TYPES.OTHER;\n      case isCharEnNum(input): return OTHER;\n      case isCharEnSpace(input): return TOKEN_TYPES.EN;\n      case isCharEnglishPunctuation(input): return OTHER;\n      case isCharJaSpace(input): return JA;\n      case isCharJapanesePunctuation(input): return OTHER;\n      case isCharJapanese(input): return JA;\n      case isCharRomaji(input): return EN;\n      default: return OTHER;\n    }\n  } else {\n    switch (true) {\n      case isCharJaSpace(input): return SPACE;\n      case isCharEnSpace(input): return SPACE;\n      case isCharJaNum(input): return JA_NUM;\n      case isCharEnNum(input): return EN_NUM;\n      case isCharEnglishPunctuation(input): return EN_PUNC;\n      case isCharJapanesePunctuation(input): return JA_PUNC;\n      case isCharKanji(input): return KANJI;\n      case isCharHiragana(input): return HIRAGANA;\n      case isCharKatakana(input): return KATAKANA;\n      case isCharJapanese(input): return JA;\n      case isCharRomaji(input): return EN;\n      default: return OTHER;\n    }\n  }\n}\n\n/**\n * Splits input into array of strings separated by opinionated token types\n * `'en', 'ja', 'englishNumeral', 'japaneseNumeral','englishPunctuation', 'japanesePunctuation','kanji', 'hiragana', 'katakana', 'space', 'other'`.\n * If `{ compact: true }` then many same-language tokens are combined (spaces + text, kanji + kana, numeral + punctuation).\n * If `{ detailed: true }` then return array will contain `{ type, value }` instead of `'value'`\n * @param  {String} input text\n * @param  {Object} [options={ compact: false, detailed: false}] options to modify output style\n * @return {String|Object[]} text split into tokens containing values, or detailed object\n * @example\n * tokenize('ふふフフ')\n * // ['ふふ', 'フフ']\n *\n * tokenize('感じ')\n * // ['感', 'じ']\n *\n * tokenize('truly 私は悲しい')\n * // ['truly', ' ', '私', 'は', '悲', 'しい']\n *\n * tokenize('truly 私は悲しい', { compact: true })\n * // ['truly ', '私は悲しい']\n *\n * tokenize('5romaji here...!?漢字ひらがな４カタ　カナ「ＳＨＩＯ」。！')\n * // [ '5', 'romaji', ' ', 'here', '...!?', '漢字', 'ひらがな', 'カタ', '　', 'カナ', '４', '「', 'ＳＨＩＯ', '」。！']\n *\n * tokenize('5romaji here...!?漢字ひらがな４カタ　カナ「ＳＨＩＯ」。！', { compact: true })\n * // [ '5', 'romaji here', '...!?', '漢字ひらがなカタ　カナ', '４「', 'ＳＨＩＯ', '」。！']\n *\n * tokenize('5romaji here...!?漢字ひらがなカタ　カナ４「ＳＨＩＯ」。！ لنذهب', { detailed: true })\n * // [\n *  { type: 'englishNumeral', value: '5' },\n *  { type: 'en', value: 'romaji' },\n *  { type: 'space', value: ' ' },\n *  { type: 'en', value: 'here' },\n *  { type: 'englishPunctuation', value: '...!?' },\n *  { type: 'kanji', value: '漢字' },\n *  { type: 'hiragana', value: 'ひらがな' },\n *  { type: 'katakana', value: 'カタ' },\n *  { type: 'space', value: '　' },\n *  { type: 'katakana', value: 'カナ' },\n *  { type: 'japaneseNumeral', value: '４' },\n *  { type: 'japanesePunctuation', value: '「' },\n *  { type: 'ja', value: 'ＳＨＩＯ' },\n *  { type: 'japanesePunctuation', value: '」。！' },\n *  { type: 'space', value: ' ' },\n *  { type: 'other', value: 'لنذهب' },\n * ]\n *\n * tokenize('5romaji here...!?漢字ひらがなカタ　カナ４「ＳＨＩＯ」。！ لنذهب', { compact: true, detailed: true})\n * // [\n *  { type: 'other', value: '5' },\n *  { type: 'en', value: 'romaji here' },\n *  { type: 'other', value: '...!?' },\n *  { type: 'ja', value: '漢字ひらがなカタ　カナ' },\n *  { type: 'other', value: '４「' },\n *  { type: 'ja', value: 'ＳＨＩＯ' },\n *  { type: 'other', value: '」。！' },\n *  { type: 'en', value: ' ' },\n *  { type: 'other', value: 'لنذهب' },\n *]\n */\nfunction tokenize(input?: string, { compact = false, detailed = false } = {}) {\n  if (input == null || isEmpty(input)) {\n    return [];\n  }\n  const chars = [...input];\n  let initial = chars.shift();\n  let prevType = getType(initial, compact);\n  initial = detailed ? { type: prevType, value: initial } : initial;\n\n  const result = chars.reduce(\n    (tokens, char) => {\n      const currType = getType(char, compact);\n      const sameType = currType === prevType;\n      prevType = currType;\n      let newValue = char;\n\n      if (sameType) {\n        newValue = (detailed ? tokens.pop().value : tokens.pop()) + newValue;\n      }\n\n      return detailed\n        ? tokens.concat({ type: currType, value: newValue })\n        : tokens.concat(newValue);\n    },\n    [initial]\n  );\n  return result;\n}\n\nexport default tokenize;\n","import isJapanese from './isJapanese';\nimport isKana from './isKana';\nimport isKanji from './isKanji';\nimport tokenize from './tokenize';\n\nconst isLeadingWithoutInitialKana = (input, leading) => leading && !isKana(input[0]);\nconst isTrailingWithoutFinalKana = (input, leading) => !leading && !isKana(input[input.length - 1]);\nconst isInvalidMatcher = (input, matchKanji) =>\n  (matchKanji && ![...matchKanji].some(isKanji)) || (!matchKanji && isKana(input));\n\n/**\n * Strips [Okurigana](https://en.wikipedia.org/wiki/Okurigana)\n * @param  {String} input text\n * @param  {Object} [options={ leading: false, matchKanji: '' }] optional config\n * @return {String} text with okurigana removed\n * @example\n * stripOkurigana('踏み込む')\n * // => '踏み込'\n * stripOkurigana('お祝い')\n * // => 'お祝'\n * stripOkurigana('お腹', { leading: true });\n * // => '腹'\n * stripOkurigana('ふみこむ', { matchKanji: '踏み込む' });\n * // => 'ふみこ'\n * stripOkurigana('おみまい', { matchKanji: 'お祝い', leading: true });\n * // => 'みまい'\n */\nfunction stripOkurigana(input = '', { leading = false, matchKanji = '' } = {}) {\n  if (\n    !isJapanese(input) ||\n    isLeadingWithoutInitialKana(input, leading) ||\n    isTrailingWithoutFinalKana(input, leading) ||\n    isInvalidMatcher(input, matchKanji)\n  ) {\n    return input;\n  }\n\n  const chars = matchKanji || input;\n  const okuriganaRegex = new RegExp(\n    leading ? `^${tokenize(chars).shift()}` : `${tokenize(chars).pop()}$`\n  );\n  return input.replace(okuriganaRegex, '');\n}\n\nexport default stripOkurigana;\n"],"names":["typeOf","value","isEmpty","input","isCharInRange","char","start","end","code","VERSION","TO_KANA_METHODS","ROMANIZATIONS","DEFAULT_OPTIONS","LATIN_UPPERCASE_START","LATIN_UPPERCASE_END","LOWERCASE_ZENKAKU_START","LOWERCASE_ZENKAKU_END","UPPERCASE_ZENKAKU_START","UPPERCASE_ZENKAKU_END","HIRAGANA_START","HIRAGANA_END","KATAKANA_START","KATAKANA_END","KANJI_START","KANJI_END","PROLONGED_SOUND_MARK","KANA_SLASH_DOT","ZENKAKU_NUMBERS","ZENKAKU_UPPERCASE","ZENKAKU_LOWERCASE","ZENKAKU_PUNCTUATION_1","ZENKAKU_PUNCTUATION_2","ZENKAKU_PUNCTUATION_3","ZENKAKU_PUNCTUATION_4","ZENKAKU_SYMBOLS_CURRENCY","HIRAGANA_CHARS","KATAKANA_CHARS","HANKAKU_KATAKANA","KATAKANA_PUNCTUATION","KANA_PUNCTUATION","CJK_SYMBOLS_PUNCTUATION","COMMON_CJK","RARE_CJK","KANA_RANGES","JA_PUNCTUATION_RANGES","JAPANESE_RANGES","MODERN_ENGLISH","HEPBURN_MACRON_RANGES","SMART_QUOTE_RANGES","ROMAJI_RANGES","EN_PUNCTUATION_RANGES","isCharJapanese","isJapanese","allowed","augmented","isJa","safeIsNaN","isEqual","first","second","areInputsEqual","newInputs","lastInputs","i","memoizeOne","resultFn","cache","memoized","newArgs","_i","lastResult","has","find","iter","tar","key","dequal","foo","bar","ctor","len","tmp","mergeWithDefaultOptions","opts","applyMapping","str","mapping","convertEnding","root","nextSubtree","tree","nextChar","newChunk","remaining","currentCursor","firstChar","parse","lastCursor","subtree","transform","map","endOfBranch","getSubTreeOf","string","correctSubTree","createCustomMapping","customMap","customTree","roma","kana","subTree","mapCopy","transformMap","mapSubtree","customSubtree","newSubtree","mergeCustomMapping","customMapping","BASIC_KUNREI","SPECIAL_SYMBOLS","CONSONANTS","SMALL_Y","SMALL_VOWELS","ALIASES","SMALL_LETTERS","SPECIAL_CASES","AIUEO_CONSTRUCTIONS","createRomajiToKanaMap","kanaTree","subtreeOf","consonant","yKana","symbol","jsymbol","aiueoKana","vowel","nChar","alternative","allExceptLast","last","parentTree","getAlternatives","list","alt","kunreiRoma","chars","xRoma","xSubtree","altRoma","prefix","altParentTree","addTsu","tsuTree","romajiToKanaMap","getRomajiToKanaTree","USE_OBSOLETE_KANA_MAP","IME_MODE_MAP","isCharUpperCase","isCharLongDash","isCharSlashDot","isCharHiragana","hiraganaToKatakana","kata","kataChar","IMEMode","useObsoleteKana","customKanaMapping","toKana","options","config","splitIntoConvertedKana","kanaToken","enforceHiragana","enforceKatakana","LISTENERS","makeOnInput","prevInput","mergedConfig","preConfiguredMap","triggers","target","convertInput","head","textToConvert","tail","splitInput","convertedText","newCursor","newValue","onComposition","type","data","trackListeners","id","inputHandler","compositionHandler","untrackListeners","targetId","findListeners","el","text","cursor","toConvert","workFromStart","workBackwards","takeWhileAndSlice","catalystChars","startIndex","source","predicate","x","result","length","events","selectionStart","selectionEnd","addDebugListeners","event","handler","removeDebugListeners","ELEMENTS","idCounter","newId","bind","element","debug","onInput","unbind","listeners","isCharRomaji","isRomaji","isRoma","isCharKatakana","isCharKana","isKana","isHiragana","isKatakana","isCharKanji","isKanji","isMixed","hasKanji","isCharInitialLongDash","index","isCharInnerLongDash","isKanaAsSymbol","LONG_VOWELS","katakanaToHiragana","toRomaji","isDestinationRomaji","convertLongVowelMark","previousKana","hira","romaji","hiraChar","kanaToHepburnMap","BASIC_ROMAJI","AMBIGUOUS_VOWELS","SMALL_Y_EXTRA","SMALL_AIUEO","YOON_KANA","YOON_EXCEPTIONS","SMALL_KANA","SOKUON_WHITELIST","getKanaToHepburnTree","createKanaToHepburnMap","getKanaToRomajiTree","romanization","romajiTree","setTrans","transliteration","firstRomajiChar","yRoma","resolveTsu","createKanaToRomajiMap","customRomajiMapping","splitIntoRomaji","romajiToken","isCharEnglishPunctuation","toHiragana","convertedKatakana","toKatakana","mergedOptions","hiragana","isCharJapanesePunctuation","isCharEnSpace","isCharJaSpace","isCharJaNum","isCharEnNum","TOKEN_TYPES","getType","compact","EN","JA","EN_NUM","JA_NUM","EN_PUNC","JA_PUNC","KANJI","HIRAGANA","KATAKANA","SPACE","OTHER","tokenize","detailed","initial","prevType","tokens","currType","sameType","isLeadingWithoutInitialKana","leading","isTrailingWithoutFinalKana","isInvalidMatcher","matchKanji","stripOkurigana","okuriganaRegex"],"mappings":"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"}